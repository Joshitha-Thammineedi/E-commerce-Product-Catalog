package com.example.ecommerceproductcatalog.controller; 
import com.example.ecommerceproductcatalog.model.Product; 
import com.example.ecommerceproductcatalog.service.ProductService; 
import org.springframework.beans.factory.annotation.Autowired; 
import org.springframework.http.HttpStatus; 
import org.springframework.http.ResponseEntity; 
import org.springframework.web.bind.annotation.*; 
import java.util.List; 
@RestController 
@RequestMapping("/api/products") 
public class ProductController { 
    @Autowired 
    private ProductService productService; 
    // GET all products 
    @GetMapping 
    public ResponseEntity<List<Product>> getAllProducts() { 
        List<Product> products = productService.getAllProducts(); 
        return new ResponseEntity<>(products, HttpStatus.OK); 
    } 
    // GET product by ID 
    @GetMapping("/{id}") 
    public ResponseEntity<Product> getProductById(@PathVariable Long id) { 
        return productService.getProductById(id) 
                .map(product -> new ResponseEntity<>(product, HttpStatus.OK)) 
                .orElseGet(() -> new ResponseEntity<>(HttpStatus.NOT_FOUND)); 
    } 
    // CREATE a new product 
    @PostMapping 
    public ResponseEntity<Product> createProduct(@RequestBody Product product) { 
        Product createdProduct = productService.createProduct(product); 
        return new ResponseEntity<>(createdProduct, HttpStatus.CREATED); 
    } 
    // UPDATE an existing product 
    @PutMapping("/{id}") 
    public ResponseEntity<Product> updateProduct(@PathVariable Long id, @RequestBody 
Product productDetails) { 
        try { 
            Product updatedProduct = productService.updateProduct(id, productDetails); 
            return new ResponseEntity<>(updatedProduct, HttpStatus.OK); 
        } catch (RuntimeException e) { // Catch the exception thrown by service for not found 
            return new ResponseEntity<>(HttpStatus.NOT_FOUND); 
        } 
    } 
    // DELETE a product 
    @DeleteMapping("/{id}") 
    public ResponseEntity<HttpStatus> deleteProduct(@PathVariable Long id) { 
        try { 
         productService.deleteProduct(id); 
            return new ResponseEntity<>(HttpStatus.NO_CONTENT); // 204 No Content for 
successful deletion 
        } catch (RuntimeException e) { 
            return new ResponseEntity<>(HttpStatus.NOT_FOUND); 
        } 
    } 
    // --- Filtering and Searching Endpoints --- 
    // Filter by category 
    @GetMapping("/category/{category}") 
    public ResponseEntity<List<Product>> getProductsByCategory(@PathVariable String 
category) { 
        List<Product> products = productService.getProductsByCategory(category); 
        if (products.isEmpty()) { 
            return new ResponseEntity<>(HttpStatus.NO_CONTENT); 
        } 
        return new ResponseEntity<>(products, HttpStatus.OK); 
    } 
    // Filter by price range 
    // Example: /api/products/price?minPrice=100&maxPrice=500 
    @GetMapping("/price") 
    public ResponseEntity<List<Product>> getProductsByPriceRange( 
            @RequestParam(required = false) Double minPrice, 
            @RequestParam(required = false) Double maxPrice) { 
        List<Product> products = productService.getProductsByPriceRange(minPrice, 
maxPrice); 
        if (products.isEmpty()) { 
            return new ResponseEntity<>(HttpStatus.NO_CONTENT); 
        } 
        return new ResponseEntity<>(products, HttpStatus.OK); 
    } 
    // Search by name (partial match) 
    // Example: /api/products/search?name=shirt 
    @GetMapping("/search") 
    public ResponseEntity<List<Product>> searchProductsByName(@RequestParam String 
name) { 
        List<Product> products = productService.searchProductsByName(name); 
        if (products.isEmpty()) { 
            return new ResponseEntity<>(HttpStatus.NO_CONTENT); 
        } 
        return new ResponseEntity<>(products, HttpStatus.OK); 
    } 
    // Filter by category AND price range 
    // Example: /api/products/filter?category=Electronics&minPrice=100&maxPrice=1000 
    @GetMapping("/filter") 
    public ResponseEntity<List<Product>> getProductsByFilter( 
            @RequestParam(required = false) String category, 
            @RequestParam(required = false) Double minPrice, 
            @RequestParam(required = false) Double maxPrice) { 
        List<Product> products; 
        if (category != null) { 
            products = productService.getProductsByCategoryAndPriceRange(category, 
minPrice, maxPrice); 
        } else { 
            products = productService.getProductsByPriceRange(minPrice, maxPrice); // 
Fallback to just price range 
        } 
        if (products.isEmpty()) { 
            return new ResponseEntity<>(HttpStatus.NO_CONTENT); 
        } 
        return new ResponseEntity<>(products, HttpStatus.OK); 
    } 
} 
